<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:component-scan base-package="com.yxlg">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<bean id="propertyConfigurer" class="com.yxlg.manage.common.EncryptPropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:properties/jdbc.properties</value>
				<value>classpath*:properties/hibernate.properties</value>
				<value>classpath*:properties/sso.properties</value>
				<value>classpath*:properties/base_config.properties</value>
				<value>classpath*:properties/security.properties</value>
				<value>classpath*:properties/redis.properties</value>
				<value>classpath*:properties/acp_sdk.properties</value>
				<value>classpath*:properties/super_pw.properties</value>
			</list>
		</property>
		<property name="keyStr" value="U{Im8}L1JhPB-Uf"/>
	</bean>

	<!-- Configure data source c3p0 <bean id="dataSourceImpl" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close"> <property name="driverClass" value="${jdbc.driverClassName}" 
		/> <property name="jdbcUrl" value="${jdbc.url}" /> <property name="user" 
		value="${jdbc.username}" /> <property name="password" value="${jdbc.password}" 
		/> <property name="minPoolSize" value="5" /> <property name="maxPoolSize" 
		value="100" /> <property name="initialPoolSize" value="10" /> <property name="maxIdleTime" 
		value="600" /> <property name="acquireIncrement" value="5" /> <property name="maxStatements" 
		value="0" /> </bean> -->

<!-- 	<bean id="dataSourceHikari" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="shutdown">
		<property name="driverClassName" value="${db.driverClass}" /> 无需指定，除非系统无法自动识别
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		连接只读数据库时配置为true， 保证安全
		<property name="readOnly" value="false" />
		等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒
		<property name="connectionTimeout" value="30000" />
		一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟
		<property name="idleTimeout" value="600000" />
		一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
			wait_timeout参数（show variables like '%timeout%';）
		<property name="maxLifetime" value="1800000" />
		连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count)
		<property name="maximumPoolSize" value="10" />
	</bean> -->
	
	<!-- 数据源配置，主库，用于读写  start -->
	<bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />        
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 最大空闲连接数 -->
      <!--   <property name="maxIdle" value="${druid.maxIdle}" /> -->
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->     
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${druid.validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />     
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
                监控统计用的filter:stat
                日志用的filter:log4j
               防御SQL注入的filter:wall -->
        <property name="filters" value="${druid.filters}" />       
    </bean>
    <bean id="myP6DataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg>
			<ref bean="druidDataSource" />
		</constructor-arg>
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="myP6DataSource" />
		</property>
		<property name="hibernateProperties" ref="hibernateProperties" />
		<property name="packagesToScan">
			<list>
				<value>com.yxlg</value>
			</list>
		</property>
	</bean>
	<!-- 数据源配置，主库，用于读写  end -->


    <!-- 数据源，从库，只用于读  start -->
    <bean id="druidDataSourceRead" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.urlRead}" />
        <property name="username" value="${jdbc.usernameRead}" />
        <property name="password" value="${jdbc.passwordRead}" />        
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 最大空闲连接数 -->
      <!--   <property name="maxIdle" value="${druid.maxIdle}" /> -->
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->     
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${druid.validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />     
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
                监控统计用的filter:stat
                日志用的filter:log4j
               防御SQL注入的filter:wall -->
        <property name="filters" value="${druid.filters}" />       
    </bean>
	
	<bean id="myP6DataSourceRead" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg>
			<ref bean="druidDataSourceRead" />
		</constructor-arg>
	</bean>
	
	<bean id="sessionFactoryRead"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="myP6DataSourceRead" />
		</property>
		<property name="hibernateProperties" ref="hibernateProperties" />
		<property name="packagesToScan">
			<list>
				<value>com.yxlg</value>
			</list>
		</property>
	</bean>
	 <!-- 数据源，从库，只用于读  end-->
	 
	<bean name="hibernateProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.connection.driver_class">${hibernate.connection.driver_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">
					${hibernate.cache.provider_configuration_file_resource_path}
				</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		abstract="false" lazy-init="default" autowire="default">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<aop:aspectj-autoproxy proxy-target-class="true" />

	<aop:config proxy-target-class="true">
		<aop:pointcut
			expression="execution(* com.yxlg.*.service.*.*(..))||execution(* com.yxlg.*.*.service.*.*(..))"
			id="transactionPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<task:annotation-driven />

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 添加sso的登录bean -->
	<bean name="authenticationFilter"
		class="org.jasig.cas.client.authentication.AuthenticationFilter"
		p:casServerLoginUrl="${sso.login.p.casServerLoginUrl}" p:renew="false"
		p:gateway="false" p:serverName="${sso.login.p.serverName}">  <!-- 授权登录成功之后，就会让浏览器直接重定向到这个地址 要是填写一个具体的网址的 p:service="" 每次登录就会直接登录一个具体的网址 -->
	</bean>

	<!-- spring data redis -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.pass}" />
		<property name="timeout" value="${redis.timeout}" />
	</bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!-- 如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast 
			to String！！！ -->
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>
	<!-- Stone.Cai 2015年6月19日 13:52:12 添加 SPRING 拦截对象 -->
	<!-- <bean id="findadive"
		class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="mappedNames">
			<list>
				商品
				<value>cascadeUpdate</value>
				<value>deleteGoodsById</value>
				<value>cascadeInsert</value>
				<value>upOffStielf</value>
				大片
				<value>addSuit</value>
				<value>updateSuit</value>
				<value>updateRelation</value>
				<value>deleteSuit</value>
				<value>upOrShielf</value>
				资讯
				<value>deleteInfoById</value>
				<value>saveInfo</value>
				<value>updateInfo</value>
				定制项
				<value>deleteCustomItemById</value>
				<value>saveCustomItem</value>
				<value>updateCustomItem</value>
				商品品类
				<value>deleteGoodsCategoryById</value>
				<value>saveGoodsCategory</value>
				<value>updateGoodsCategory</value>
				面料信息
				<value>deleteMaterial</value>
				<value>saveMaterial</value>
			</list>
		</property>
		<property name="advice">
			<ref bean="afteradiveRedis" />
		</property>
	</bean> -->
	
<!--		  &lt;!&ndash; 配置druid监控spring jdbc &ndash;&gt;
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
 
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" >
        <property name="patterns">
            <list>
                <value>com.yxlg.*</value>
            </list>
        </property>
    </bean>

    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>
	-->
</beans>